import{t,a as i}from"./DrjBu-Pq.js";import"./CeIxqNZp.js";import{$ as s}from"./CnMiI8Eq.js";const l={title:"Write Bug Reports That Developers Love!",date:"2024-11-26T00:00:00.000Z",categories:["testing"]},{title:h,date:p,categories:u}=l;var r=t('<section><h2 id="️-1-title"><a href="#️-1-title">🛠️ 1. Title</a></h2><p>Short and specific: a clear summary of the bug.</p><p>It should also be searchable, so developers can find it in a pinch.</p><section><h3 id="tips-on-writing-great-titles"><a href="#tips-on-writing-great-titles">Tips on writing great titles:</a></h3><ul><li><ol><li>Keep it simple, but descriptive.</li></ol></li> <li><ol start="2"><li>Don’t abbreviate.</li></ol></li> <li><ol start="3"><li>Make it searchable.</li></ol></li> <li><ol start="4"><li>Focus on the technical problem.</li></ol></li> <li><ol start="5"><li>Highlight the specific feature/component you have issues with.</li></ol></li></ul></section></section> <section><h2 id="️-2-steps-to-reproduce"><a href="#️-2-steps-to-reproduce">🛠️ 2. Steps to reproduce</a></h2><p>Describe how you found the bug, so the developer can try to reproduce it.</p><section><h3 id="tips-on-writing-reproducible-steps"><a href="#tips-on-writing-reproducible-steps">Tips on writing reproducible steps:</a></h3><ul><li><ol><li>Use a numbered list so it’s easy to follow.</li></ol></li> <li><ol start="2"><li>This is your chance to be comprehensive and (reasonably) verbose. Don’t leave out any details!</li></ol></li></ul></section></section> <section><h2 id="️-3-expected-vs-actual-result"><a href="#️-3-expected-vs-actual-result">🛠️ 3. Expected vs actual result</a></h2><p>Take some time to explain what should happen vs. what actually happened. If you just describe the bug, some people might think you’re describing the expected behavior.</p><section><h3 id="tips-for-writing-expected-vs-actual-results"><a href="#tips-for-writing-expected-vs-actual-results">Tips for writing expected vs. actual results:</a></h3><ul><li><ol><li>Use a direct comparison format. For example, “The button should turn green” vs. “The button is turning blue”.</li></ol></li> <li><ol start="2"><li>Be precise. Simply stating “it went wrong” instead of “the page loads indefinitely” means you are leaving out very valuable information!</li></ol></li></ul></section></section> <section><h2 id="️-4-screenshot-or-proof"><a href="#️-4-screenshot-or-proof">🛠️ 4. Screenshot or Proof</a></h2><p>Screenshots and annotations help developers visualize the bug, and pinpoint its location on the page.</p><section><h3 id="tips-on-taking-great-screenshots"><a href="#tips-on-taking-great-screenshots">Tips on taking great screenshots</a></h3><ul><li><ol><li>Annotations go a long way towards driving your point across.</li></ol></li> <li><ol start="2"><li>Highlight the problematic element. Don’t be ambiguous.</li></ol></li> <li><ol start="3"><li>Use big fonts, different colors, etc.—the bug needs to be even more obvious here than in your summary.</li></ol></li> <li><ol start="4"><li>For complicated issues, record a short video! This adds a ton of helpful context when trying to reproduce bugs.</li></ol></li></ul></section></section> <section><h2 id="️-5-priority"><a href="#️-5-priority">🛠️ 5. Priority</a></h2><p>The urgency and potential impact of the bug. Determines how quickly it needs to be fixed.</p><section><h3 id="how-to-determine-priorityseverity"><a href="#how-to-determine-priorityseverity">How to determine priority/severity:</a></h3><ul><li><ol><li>Critical: blocking bugs that directly prevent business. Example: a checkout page not loading.</li></ol></li> <li><ol start="2"><li>High: affects major features, but non-breaking. E.g.: the search bar on an e-commerce website.</li></ol></li> <li><ol start="3"><li>Medium: noticeable bugs that disrupt normal use. E.g.: broken link, long loading times.</li></ol></li> <li><ol start="4"><li>Low: small issues and enhancements: typos, missing images…</li></ol></li></ul></section></section> <section><h2 id="️-6-environment"><a href="#️-6-environment">🛠️ 6. Environment</a></h2><p>For developers to reproduce and fix your bug, they’ll need to know your browser version, screen size, operating system… Some bugs only occur within specific environments.</p><section><h3 id="how-to-find-your-environment-info"><a href="#how-to-find-your-environment-info">How to find your environment info:</a></h3><ul><li><ol><li>Browser and version: look for a “Help” or “About” option in your browser’s menu.</li></ol></li> <li><ol start="2"><li>Operating system: on PC, press the Windows key + Pause/break. On a Mac, click the Apple logo and choose “About this Mac”.</li></ol></li> <li><ol start="3"><li>Screen size: look in your computer’s display settings, or search online for “screen resolution” along with your device model.</li></ol></li></ul></section></section> <section><h2 id="️-7-console-logs"><a href="#️-7-console-logs">🛠️ 7. Console logs</a></h2><p>This is where your web browser <strong>shows errors or warnings</strong>. Console logs can help developers figure out what went wrong.</p><section><h3 id="how-to-access-your-console-logs"><a href="#how-to-access-your-console-logs">How to access your console logs</a></h3><ul><li><ol><li>Right-click the page, select “Inspect” or “Inspect Element”, then click on the “Console” tab.</li></ol></li> <li><ol start="2"><li>Try to make the bug happen again and see if any messages pop up there.</li></ol></li></ul></section></section> <section><h2 id="reference"><a href="#reference">Reference</a></h2><p><a href="https://www.perfectbugreport.io" rel="nofollow noopener noreferrer external" target="_blank">https://www.perfectbugreport.io</a></p></section>',1);function d(e){var o=r();s(14),i(e,o)}export{d as default,l as metadata};
