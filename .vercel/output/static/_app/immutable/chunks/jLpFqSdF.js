import{t as c,a as r}from"./DrjBu-Pq.js";import"./CeIxqNZp.js";import{f as l,s as i,a1 as t,a2 as e,$ as u}from"./CnMiI8Eq.js";import{h as k}from"./fXp2Zi7U.js";const m={title:"Essential tsconfig",date:"2024-11-16T00:00:00.000Z",categories:["frontend"]},{title:b,date:w,categories:v}=m;var d=c('<section><h2 id="tldr"><a href="#tldr">TLDR</a></h2><pre class="language-json"><!></pre></section> <section><h2 id="what-is-tsconfigjson-and-why-it-matters"><a href="#what-is-tsconfigjson-and-why-it-matters">What Is tsconfig.json and why it matters?</a></h2><p>The tsconfig.json file is a key part of any TypeScript project. It tells the compiler how to turn your TypeScript code into JavaScript. By setting up this file, you can control things like how strict the error checks are and what format the output should be in. This is important for managing real-world production issues effectively</p></section> <section><h2 id="reference"><a href="#reference">Reference</a></h2><p><a href="https://tduyng.com/blog/tsconfig-options-you-should-use/" rel="nofollow noopener noreferrer external" target="_blank">https://tduyng.com/blog/tsconfig-options-you-should-use/</a></p></section>',1);function S(o){var s=d(),n=l(s),a=i(t(n)),p=t(a);k(p,()=>`<code class="language-json"><span class="token punctuation">&#123;</span>
    <span class="token property">"compilerOptions"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token property">"incremental"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Enables incremental compilation, build only the changed code</span>
        <span class="token property">"strict"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Enables all strict type-checking options (best practice)</span>
        <span class="token property">"rootDir"</span><span class="token operator">:</span> <span class="token string">"src"</span><span class="token punctuation">,</span> <span class="token comment">// Root directory of input files</span>
        <span class="token property">"outDir"</span><span class="token operator">:</span> <span class="token string">"./build"</span><span class="token punctuation">,</span> <span class="token comment">// Output directory for compiled files</span>
        <span class="token property">"allowJs"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Allows JavaScript files to be compiled alongside TypeScript files.</span>
        <span class="token property">"target"</span><span class="token operator">:</span> <span class="token string">"es6"</span><span class="token punctuation">,</span> <span class="token comment">// Specifies the ECMAScript target version</span>
        <span class="token property">"module"</span><span class="token operator">:</span> <span class="token string">"NodeNext"</span><span class="token punctuation">,</span> <span class="token comment">// Sets the module system to use (commonjs, nodenext, esnext)</span>
        <span class="token property">"lib"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"es2024"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment">// Specifies the library files to be included in the compilation.</span>
        <span class="token property">"sourceMap"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Generates source maps for debugging</span>
        <span class="token property">"skipLibCheck"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Skips type checking of declaration files</span>
        <span class="token property">"noUnusedParameters"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Do not allow unused parameters in functions.</span>
        <span class="token property">"noUnusedLocals"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// Similar to noUnusedParameters, but for local variables.</span>
        <span class="token property">"noUncheckedIndexedAccess"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// it ensures that indexed access types are checked for undefined values,</span>
        <span class="token property">"esModuleInterop"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Enables compatibility with CommonJS modules, allowing default imports from modules with no default export.</span>
        <span class="token property">"resolveJsonModule"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Allows importing JSON files as modules</span>
        <span class="token property">"forceConsistentCasingInFileNames"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// Ensures that file names are treated with consistent casing, which is important for cross-platform compatibility.,</span>
        <span class="token property">"noImplicitOverride"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// This option requires that any method in a subclass that overrides a method in a superclass must explicitly use the override keyword.</span>
        <span class="token property">"noPropertyAccessFromIndexSignature"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// This setting enforces that properties accessed via dot notation must be explicitly defined in the type.</span>
        <span class="token property">"allowUnreachableCode"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// When set to false, this option raises errors for code that is unreachable, meaning it cannot be executed.</span>
        <span class="token property">"noFallthroughCasesInSwitch"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// This option reports errors for switch statement cases that fall through without a break, return, or throw statement.</span>
        <span class="token property">"noErrorTruncation"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// When enabled, this option prevents TypeScript from truncating error messages, providing full details about the error.</span>
        <span class="token property">"declaration"</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token comment">// Generates corresponding .d.ts file</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"include"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"src/**/*.ts"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"exclude"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`),e(a),e(n),u(4),r(o,s)}export{S as default,m as metadata};
