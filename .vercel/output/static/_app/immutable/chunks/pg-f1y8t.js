import{t as P,a as U}from"./DrjBu-Pq.js";import"./CeIxqNZp.js";import{f as Y,s,a1 as n,a2 as a,$ as M}from"./CnMiI8Eq.js";import{h as p}from"./fXp2Zi7U.js";const B={title:"ES6 Javascript",date:"2023-06-24T00:00:00.000Z",categories:["frontend"]},{title:K,date:Q,categories:V}=B;var H=P('<section><h2 id="copy-an-array-with-the-spread-operator"><a href="#copy-an-array-with-the-spread-operator">Copy an Array with the Spread Operator</a></h2><pre class="language-js"><!></pre><p>Note: you can <code>push</code> the <code>arr</code> but the copy won’t be affected.</p></section> <section><h2 id="nested-destructuring-for-objects"><a href="#nested-destructuring-for-objects">Nested Destructuring for Objects</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="copy-an-object-with-the-spread-operator"><a href="#copy-an-object-with-the-spread-operator">Copy an Object with the Spread Operator</a></h2><pre class="language-js"><!></pre><p>Note: the copy wont be affected when the original change.</p></section> <section><h2 id="merge-arrays-using-the-spread-operator"><a href="#merge-arrays-using-the-spread-operator">Merge Arrays using the Spread Operator</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="flatten-a-nested-array-in-javascript-with-arrayprototypeflat"><a href="#flatten-a-nested-array-in-javascript-with-arrayprototypeflat">Flatten a Nested Array in JavaScript with Array.prototype.flat</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="merge-objects-with-javascripts-spread-operator"><a href="#merge-objects-with-javascripts-spread-operator">Merge Objects with JavaScript’s Spread Operator</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="forin-loop-vs-forof-loop"><a href="#forin-loop-vs-forof-loop">For…in Loop vs. For…of Loop</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="arrayprototypeflatmap-from-es2019"><a href="#arrayprototypeflatmap-from-es2019">Array.prototype.flatMap from ES2019</a></h2><p>Use the flatMap function to both map and flatten at the same time.</p><pre class="language-js"><!></pre></section> <section><h2 id="convert-an-object-to-an-array-and-back-again-with-objectentries-and-objectfromentries"><a href="#convert-an-object-to-an-array-and-back-again-with-objectentries-and-objectfromentries">Convert an Object to an Array and back again with Object.entries and Object.fromEntries</a></h2><p>Use these functions in order to flip back and forth between an Object and an Array.</p><pre class="language-js"><!></pre></section> <section><h2 id="safely-access-a-property-on-a-javascript-object-with-optional-chaining"><a href="#safely-access-a-property-on-a-javascript-object-with-optional-chaining">Safely Access a Property on a JavaScript Object with Optional Chaining</a></h2><p>You can use optional chaining to access properties of an object. If the parent property exists, it acts as a typical dot accessor. If not, optional chaining prevents an error from being thrown and instead returns undefined.</p><pre class="language-js"><!></pre></section> <section><h2 id="safely-access-a-property-on-a-javascript-array-with-optional-chaining"><a href="#safely-access-a-property-on-a-javascript-array-with-optional-chaining">Safely Access a Property on a JavaScript Array with Optional Chaining</a></h2><p>You can use optional chaining to access elements in an array. If the array is null or undefined, attempting to access an element with optional chaining prevents an error from being thrown, returning undefined instead.</p><pre class="language-js"><!></pre></section>',1);function W(F){var m=H(),t=Y(m),y=s(n(t)),E=n(y);p(E,()=>`<code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> copy <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span><span class="token punctuation">;</span>

</code>`),a(y),M(),a(t);var o=s(t,2),b=s(n(o)),C=n(b);p(C,()=>`<code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">'Laurie'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token punctuation">&#123;</span>data<span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
<span class="token comment">// data = &#123;user: 'Laurie'&#125;</span>

<span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>user<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj
<span class="token comment">// user = 'Laurie'</span></code>`),a(b),a(o);var e=s(o,2),g=s(n(e)),J=n(g);p(J,()=>`<code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">&#125;</span>



<span class="token keyword">let</span> copy <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj<span class="token punctuation">&#125;</span>
<span class="token comment">// copy = &#123;a:1,b:2,c:3&#125;</span>

<span class="token comment">// add one thing in copy</span>
copy<span class="token punctuation">[</span><span class="token string">'d'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span>
<span class="token comment">// copy = &#123;a:1,b:2,c:3,d:4&#125;</span></code>`),a(g),M(),a(e);var c=s(e,2),f=s(n(c)),L=n(f);p(L,()=>`<code class="language-js"><span class="token keyword">let</span> arr1<span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>

<span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>

<span class="token keyword">let</span> arrMerged <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span><span class="token operator">...</span>arr2<span class="token punctuation">]</span>

<span class="token comment">//arrMerged = [1, 2, 3, 4, 5, 6]</span></code>`),a(f),a(c);var l=s(c,2),h=s(n(l)),N=n(h);p(N,()=>`<code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">let</span> resultFlat1 <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> resultFlat2<span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultFlat1<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resultFlat2<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// [1, 2, [3, 4, [5, 6]]]</span>
<span class="token comment">// [1, 2, 3, 4, [5, 6]]</span>
<span class="token comment">// [1, 2, 3, 4, 5, 6]</span></code>`),a(h),a(l);var r=s(l,2),j=s(n(r)),x=n(j);p(x,()=>`<code class="language-js"><span class="token keyword">let</span> obj1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token literal-property property">d</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> merged <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span><span class="token operator">...</span>obj2<span class="token punctuation">&#125;</span>

<span class="token comment">//merged = &#123;a:1,b:2,c:3,d:4&#125;</span></code>`),a(j),a(r);var u=s(r,2),w=s(n(u)),I=n(w);p(I,()=>`<code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>
<span class="token comment">// 3</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">in</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// 0</span>
<span class="token comment">// 1</span>
<span class="token comment">// 2</span>

<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// [ [ 'a', 1 ], [ 'b', 2 ], [ 'c', 3 ] ]</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> value<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, value: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>value<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// key: a, value: 1</span>
<span class="token comment">// key: b, value: 2</span>
<span class="token comment">// key: c, value: 3</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// a</span>
<span class="token comment">// b</span>
<span class="token comment">// c</span></code>`),a(w),a(u);var k=s(u,2),v=s(n(k),2),T=n(v);p(T,()=>`<code class="language-js"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"map: "</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">[</span>el<span class="token punctuation">,</span> el <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// this is [[1,2],[2,4],[3,6]]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"flatMap: "</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">[</span>el<span class="token punctuation">,</span> el <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// this is [1,2,2,4,3,6]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"map().flat(): "</span><span class="token punctuation">,</span> arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">el</span> <span class="token operator">=></span> <span class="token punctuation">[</span>el<span class="token punctuation">,</span> el <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// this is [1,2,2,4,3,6]</span>
</code>`),a(v),a(k);var i=s(k,2),_=s(n(i),2),D=n(_);p(D,()=>`<code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> arr <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"To array: "</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Back to Object: "</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`),a(_),a(i);var d=s(i,2),O=s(n(d),2),R=n(O);p(R,()=>`<code class="language-js">    <span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">node</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>node<span class="token punctuation">)</span>
    <span class="token comment">//1</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token operator">?.</span>node<span class="token punctuation">)</span>
    <span class="token comment">//1</span>

    <span class="token keyword">let</span> other <span class="token operator">=</span> <span class="token keyword">null</span>
   
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>node<span class="token punctuation">)</span>
    <span class="token comment">//error</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>other<span class="token operator">?.</span>node<span class="token punctuation">)</span>
    <span class="token comment">//undefined</span></code>`),a(O),a(d);var S=s(d,2),A=s(n(S),2),$=n(A);p($,()=>`<code class="language-js">    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>
    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment">//1</span>

    <span class="token keyword">let</span> other <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    other<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment">//ERROR. DON'T DO THIS</span>
    other<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    <span class="token comment">// safely recieve undefined</span></code>`),a(A),a(S),U(F,m)}export{W as default,B as metadata};
