import{t as en,a as cn}from"./DrjBu-Pq.js";import"./CeIxqNZp.js";import{f as ln,s as a,a1 as n,a2 as s}from"./CnMiI8Eq.js";import{h as t}from"./fXp2Zi7U.js";const rn={title:"Essential JS methods",date:"2024-02-07T00:00:00.000Z",categories:["frontend"]},{title:yn,date:fn,categories:bn}=rn;var un=en('<section><h2 id="function-throttling"><a href="#function-throttling">Function throttling</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="url-decoding--encoding"><a href="#url-decoding--encoding">URL decoding & encoding</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="get-global-css-variables-using--javascript"><a href="#get-global-css-variables-using--javascript">Get global CSS variables using ðŸ“¡ JavaScript</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="set-global-css-variables--with-js"><a href="#set-global-css-variables--with-js">Set global CSS variables ðŸ’ª with JS</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="clear-all-cookies"><a href="#clear-all-cookies">Clear all cookies</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="clear-all-project-caches"><a href="#clear-all-project-caches">Clear all project caches</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="get-url-query-parameters-by-name"><a href="#get-url-query-parameters-by-name">Get URL query parameters by name</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="login-page-time-prefix"><a href="#login-page-time-prefix">Login page time prefix</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="welcome-message-on-login-page"><a href="#welcome-message-on-login-page">Welcome message on login page</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="recursive-deep-copy"><a href="#recursive-deep-copy">Recursive deep copy</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="randomly-generate-a-uuid"><a href="#randomly-generate-a-uuid">Randomly generate a UUID</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="random-boolean"><a href="#random-boolean">Random boolean</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="reverse-a-string"><a href="#reverse-a-string">Reverse a string</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="randomly-generate-hex-colors"><a href="#randomly-generate-hex-colors">Randomly generate hex colors</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="get-the-true-type-of-a-variable"><a href="#get-the-true-type-of-a-variable">Get the true type of a variable</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="copy-text-to-clipboard"><a href="#copy-text-to-clipboard">Copy text to clipboard</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="scroll-to-top-or-bottom"><a href="#scroll-to-top-or-bottom">Scroll to top or bottom</a></h2><pre class="language-js"><!></pre></section> <section><h2 id="object-common-methods"><a href="#object-common-methods">Object common methods</a></h2><pre class="language-js"><!></pre></section>',1);function hn(H){var v=un(),p=ln(v),j=a(n(p)),W=n(j);t(W,()=>`<code class="language-js"><span class="token comment">/** Function throttling timer version */</span>
<span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">callback</span><span class="token operator">:</span> Function<span class="token punctuation">,</span> <span class="token literal-property property">delay</span><span class="token operator">:</span> number</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">let</span> <span class="token literal-property property">timer</span><span class="token operator">:</span> number <span class="token operator">|</span> <span class="token keyword">null</span>
   <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span> <span class="token punctuation">(</span>timer<span class="token punctuation">)</span> <span class="token keyword">return</span>
     <span class="token keyword">const</span> args <span class="token operator">=</span> arguments <span class="token comment">//Use closure to save parameter array</span>
     timer <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
       <span class="token function">callback</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>
       timer <span class="token operator">=</span> <span class="token keyword">null</span>
     <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> delay<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code>`),s(j),s(p);var o=a(p,2),x=a(n(o)),B=n(x);t(B,()=>`<code class="language-js"><span class="token comment">/** Encode URL */</span>
<span class="token keyword">function</span> <span class="token function">encodeURL</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string<span class="token punctuation">,</span> isComponent <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> isComponent <span class="token operator">?</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">encodeURI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/** Decode URL */</span>
<span class="token keyword">function</span> <span class="token function">decodeURL</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">url</span><span class="token operator">:</span> string<span class="token punctuation">,</span> isComponent <span class="token operator">=</span> <span class="token boolean">true</span></span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> isComponent <span class="token operator">?</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">decodeURI</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
</code>`),s(x),s(o);var e=a(o,2),_=a(n(e)),J=n(_);t(J,()=>`<code class="language-js"><span class="token comment">/**
 * @description Use JS to get global css variables
 * @param cssVariableName variable name
 * @returns &#123;string&#125; variable value
*/</span>
<span class="token keyword">function</span> <span class="token function">getCssVariableValue</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">cssVariableName</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token function">getComputedStyle</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span>documentElement<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPropertyValue</span><span class="token punctuation">(</span>cssVariableName<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`),s(_),s(e);var c=a(e,2),R=a(n(c)),P=n(R);t(P,()=>`<code class="language-js"><span class="token comment">/**
  * @description Set global CSS variables with JS
  * @param &#123;string&#125; cssVariableName variable name
  * @param &#123;string&#125; cssVariableValue variable value
  */</span>
<span class="token keyword">function</span> <span class="token function">setCssVariableValue</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">cssVariableName</span><span class="token operator">:</span> string<span class="token punctuation">,</span> <span class="token literal-property property">cssVariableValue</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
   document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>style<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span>cssVariableName<span class="token punctuation">,</span> cssVariableValue<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`),s(R),s(c);var l=a(c,2),C=a(n(l)),A=n(C);t(A,()=>`<code class="language-js"><span class="token comment">/**
 * @description clear all cookies
 */</span>
<span class="token keyword">function</span> <span class="token function">clearCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> keyList <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^ =;]+(?==)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>
   keyList <span class="token operator">&amp;&amp;</span> keyList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=0;path=/;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`),s(C),s(l);var r=a(l,2),U=a(n(r)),F=n(U);t(F,()=>`<code class="language-js"><span class="token comment">/**
 * @description Clear all project caches
 */</span>
<span class="token keyword">function</span> <span class="token function">clearCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  window<span class="token punctuation">.</span>localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  window<span class="token punctuation">.</span>sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> keyList <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">[^ =;]+(?==)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">g</span></span><span class="token punctuation">)</span> <span class="token keyword">as</span> string<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token keyword">null</span>
  keyList <span class="token operator">&amp;&amp;</span> keyList<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token parameter">key</span> <span class="token operator">=></span> <span class="token punctuation">(</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=0;path=/;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUTCString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`),s(U),s(r);var u=a(r,2),S=a(n(u)),Q=n(S);t(Q,()=>`<code class="language-js"><span class="token comment">/**
  * @description Get URL query parameters by name
  * @param &#123;string&#125; key The key of the query parameter that needs to be obtained
  * @param &#123;string&#125; url The link that needs to be parsed, the default is window.location.href
  * @returns &#123;string | null&#125; obtained value corresponding to key
  */</span>
<span class="token keyword">function</span> <span class="token function">getQueryByName</span><span class="token punctuation">(</span><span class="token parameter">key<span class="token punctuation">,</span> url <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>href</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> queryNameRegExp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">[?&amp;]</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>key<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">=([^&amp;]*)(?:&amp;|$)</span><span class="token template-punctuation string">&#96;</span></span><span class="token punctuation">)</span>
   <span class="token keyword">const</span> queryNameMatch <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>queryNameRegExp<span class="token punctuation">)</span>
   <span class="token keyword">return</span> queryNameMatch <span class="token operator">?</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>queryNameMatch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span>
<span class="token punctuation">&#125;</span></code>`),s(S),s(u);var i=a(u,2),L=a(n(i)),Z=n(L);t(Z,()=>`<code class="language-js"><span class="token comment">/**
  * @description time prefix of login page
  * @returns &#123;string&#125; time prefix
  */</span>
<span class="token keyword">function</span> <span class="token function">timeFix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> time <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">const</span> hour <span class="token operator">=</span> time<span class="token punctuation">.</span><span class="token function">getHours</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> hour <span class="token operator">&lt;</span> <span class="token number">9</span> <span class="token operator">?</span> <span class="token string">'Good morning'</span> <span class="token operator">:</span> hour <span class="token operator">&lt;=</span> <span class="token number">11</span> <span class="token operator">?</span> <span class="token string">'Good morning'</span> <span class="token operator">:</span> hour <span class="token operator">&lt;=</span> <span class="token number">13</span> <span class="token operator">?</span> <span class="token string">'Good afternoon'</span> <span class="token operator">:</span> hour <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token operator">?</span> <span class="token string">'Good afternoon'</span> <span class="token operator">:</span> <span class="token string">'Good evening'</span>
<span class="token punctuation">&#125;</span></code>`),s(L),s(i);var k=a(i,2),O=a(n(k)),z=n(O);t(z,()=>`<code class="language-js"><span class="token comment">/**
  * @description Welcome message on the login page
  * @returns &#123;string&#125; random welcome message
  */</span>
<span class="token keyword">function</span> <span class="token function">welcome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'Long time no see, I miss you so much! '</span><span class="token punctuation">,</span> <span class="token string">'Wait until the stars go to sleep before I miss you'</span><span class="token punctuation">,</span> <span class="token string">'We are open today'</span><span class="token punctuation">]</span>
   <span class="token keyword">return</span> list<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> list<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>
<span class="token punctuation">&#125;</span></code>`),s(O),s(k);var d=a(k,2),V=a(n(d)),K=n(V);t(K,()=>`<code class="language-js"><span class="token comment">/**
  * @description Make a deep copy of the incoming data and return it
  * @param &#123;any&#125; source data source
  * @returns &#123;any&#125; copied data
  */</span>
<span class="token keyword">function</span> <span class="token function">deepClone</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">source</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> any <span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>source <span class="token operator">||</span> <span class="token keyword">typeof</span> source <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> source
   <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token keyword">instanceof</span> <span class="token class-name">Date</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span>source <span class="token keyword">instanceof</span> <span class="token class-name">RegExp</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span>
   <span class="token keyword">const</span> target <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">as</span> Record<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token keyword">as</span> Record<span class="token operator">&lt;</span>any<span class="token punctuation">,</span> any<span class="token operator">></span><span class="token punctuation">)</span>
   <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepClone</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
   <span class="token keyword">return</span> target
<span class="token punctuation">&#125;</span>
</code>`),s(V),s(d);var m=a(d,2),E=a(n(m)),X=n(E);t(X,()=>`<code class="language-js"><span class="token comment">/**
  * @description Randomly generate a UUID
  * @returns &#123;string&#125; generated uuid
  */</span>
<span class="token keyword">function</span> <span class="token function">getRandomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> tempURL <span class="token operator">=</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">const</span> uuidStr <span class="token operator">=</span> tempURL<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token keyword">const</span> separator <span class="token operator">=</span> uuidStr<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">'/'</span> <span class="token operator">:</span> <span class="token string">':'</span>
   <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token function">revokeObjectURL</span><span class="token punctuation">(</span>tempURL<span class="token punctuation">)</span>
   <span class="token keyword">return</span> uuidStr<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>uuidStr<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span>separator<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">getRandomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token parameter">string</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0x10000</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
   <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'-'</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`),s(E),s(m);var g=a(m,2),I=a(n(g)),Y=n(I);t(Y,()=>`<code class="language-js"><span class="token comment">/**
  * @description random boolean value
  * @returns &#123;boolean&#125; true | false
  */</span>
<span class="token keyword">function</span> <span class="token function">getRandomBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> boolean <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0.5</span>
<span class="token punctuation">&#125;</span></code>`),s(I),s(g);var y=a(g,2),T=a(n(y)),nn=n(T);t(nn,()=>`<code class="language-js"><span class="token comment">/**
  * @description reverse string
  * @param &#123;string&#125; str string
  * @returns &#123;string&#125; reversed string
  */</span>
<span class="token keyword">function</span> <span class="token function">reverseString</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">str</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`),s(T),s(y);var f=a(y,2),M=a(n(f)),sn=n(M);t(sn,()=>`<code class="language-js"><span class="token comment">/**
  * @description Randomly generates a color string in Hex format
  * @returns &#123;string&#125; Color string in Hex format
  */</span>
<span class="token keyword">function</span> <span class="token function">getRandomHexColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">&#96;</span><span class="token string">#</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">0xffffff</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">&#96;</span></span>
<span class="token punctuation">&#125;</span>
</code>`),s(M),s(f);var b=a(f,2),N=a(n(b)),an=n(N);t(an,()=>`<code class="language-js"><span class="token comment">/**
  * @description Get the real type of the variable
  * @param &#123;any&#125; variable variable of any type
  * @returns &#123;string&#125; variable type
  */</span>
<span class="token keyword">function</span> <span class="token function">getRawType</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">variable</span><span class="token operator">:</span> any</span><span class="token punctuation">)</span><span class="token operator">:</span> string <span class="token punctuation">&#123;</span>
   <span class="token keyword">return</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>variable<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`),s(N),s(b);var h=a(b,2),q=a(n(h)),tn=n(q);t(tn,()=>`<code class="language-js"><span class="token comment">/**
  * @description Copy text to clipboard
  * @param &#123;string&#125; text The copied text
  */</span>
<span class="token keyword">function</span> <span class="token function">copyText</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">text</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
   <span class="token comment">// Whether to support navigator.clipboard attribute</span>
   <span class="token keyword">const</span> isClipboardApiSupported <span class="token operator">=</span> window<span class="token punctuation">.</span>navigator <span class="token operator">&amp;&amp;</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>clipboard
   <span class="token keyword">if</span> <span class="token punctuation">(</span>isClipboardApiSupported<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
     window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>clipboard<span class="token punctuation">.</span><span class="token function">writeText</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
     <span class="token keyword">const</span> textarea <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'textarea'</span><span class="token punctuation">)</span>
     textarea<span class="token punctuation">.</span>readOnly <span class="token operator">=</span> <span class="token boolean">true</span>
     textarea<span class="token punctuation">.</span>value <span class="token operator">=</span> text
     textarea<span class="token punctuation">.</span>style<span class="token punctuation">.</span>position <span class="token operator">=</span> <span class="token string">'absolute'</span>
     textarea<span class="token punctuation">.</span>style<span class="token punctuation">.</span>top <span class="token operator">=</span> <span class="token string">'-9999px'</span>
     textarea<span class="token punctuation">.</span>style<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token string">'-9999px'</span>
     document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>textarea<span class="token punctuation">)</span>
     textarea<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
     document<span class="token punctuation">.</span><span class="token function">execCommand</span><span class="token punctuation">(</span><span class="token string">'copy'</span><span class="token punctuation">)</span>
     textarea<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
   <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),s(q),s(h);var w=a(h,2),D=a(n(w)),pn=n(D);t(pn,()=>`<code class="language-js"><span class="token comment">/**
  * @description scroll to top
  */</span>
<span class="token keyword">function</span> <span class="token function">scrollToTop</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">element</span><span class="token operator">:</span> HTMLElement</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
   element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">'smooth'</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">'start'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">/**
 * @description scroll to bottom
 */</span>
<span class="token keyword">function</span> <span class="token function">scrollToBottom</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">element</span><span class="token operator">:</span> HTMLElement</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span> <span class="token punctuation">&#123;</span>
  element<span class="token punctuation">.</span><span class="token function">scrollIntoView</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">behavior</span><span class="token operator">:</span> <span class="token string">'smooth'</span><span class="token punctuation">,</span> <span class="token literal-property property">block</span><span class="token operator">:</span> <span class="token string">'end'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span></code>`),s(D),s(w);var G=a(w,2),$=a(n(G)),on=n($);t(on,()=>`<code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span>
<span class="token comment">//Object.keys()</span>
<span class="token comment">// Will return an array consisting of the given object's own enumerable properties</span>
Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// ['a', 'b', 'c', 'd']</span>
<span class="token comment">//Object.values()</span>
<span class="token comment">// Returns an array of all enumerable property values of the given object itself</span>
Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// [1, 2, 3, 4]</span>
<span class="token comment">//Object.entries()</span>
<span class="token comment">// Returns an array of key-value pairs for the given object's own enumerable properties</span>
Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token comment">// [['a', 1], ['b', 2], ['c', 3], ['d', 4]]</span>
<span class="token comment">//Object.fromEntries()</span>
<span class="token comment">//Convert the list of key-value pairs into an object, which is the reverse operation of Object.entries()</span>
Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// &#123; a: 1, b: 2 &#125;</span>
<span class="token comment">// hasOwnProperty()</span>
<span class="token comment">// Returns a Boolean value indicating whether the object has the specified attribute in its own properties (that is, whether it has the specified key)</span>
obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token comment">// true</span>
obj<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span><span class="token string">'fff'</span><span class="token punctuation">)</span> <span class="token comment">// false</span>
<span class="token comment">//Object.assign()</span>
<span class="token comment">// Used to copy the values of all enumerable properties from one or more source objects to the target object. It will return the target object.</span>
<span class="token keyword">const</span> target <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> source <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> result <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> source<span class="token punctuation">)</span> <span class="token comment">// &#123; ...target, ...source &#125; has the same effect</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token comment">// &#123;a: 1, b: 4, c: 5&#125;</span></code>`),s($),s(G),cn(H,v)}export{hn as default,rn as metadata};
