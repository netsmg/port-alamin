import{t as i,a as s}from"./DrjBu-Pq.js";import"./CeIxqNZp.js";import{$ as o}from"./CnMiI8Eq.js";const r={title:"UI/UX Testing simplified",date:"2023-09-04T00:00:00.000Z",categories:["ux"]},{title:u,date:h,categories:d}=r;var n=i('<section><h2 id="what-to-after-designing"><a href="#what-to-after-designing">What to after designing?</a></h2><p>Ok you finished designed your project, what now? you have to test it. Guess what? you need to plan your test early.</p><section><h3 id="why-plan-testing-early"><a href="#why-plan-testing-early">Why plan testing early?</a></h3><ul><li>Additional clarity on scope: What browser? What devices?</li> <li>Less explaining: setting expectations now for what you’ll test reduces misunderstanding.</li> <li>Less stress before, during and after launch: If you’ve thoroughly tested everything, you can be confident everything performs as expected.</li></ul><p>Simple: Anything that isn’t on the test plan? not happening.</p></section><section><h3 id="you-cant-test-everything"><a href="#you-cant-test-everything">You can’t test everything</a></h3><p>Be realistic about what matters most - because you can’t do it all. Three good reasons:</p><ul><li>Budgets are finite. You’re working for a client… with a budget, always.</li> <li>Schedules are finite. If testing isn’t on the schedule, it’ll be rushed or left out.</li> <li>Not every scenario matters. Your website may not need to work on hundreds of devices.</li></ul></section></section> <section><h2 id="identify-who-youre-testing-for"><a href="#identify-who-youre-testing-for">Identify who you’re testing for</a></h2><p>Focus on scenarios most relevant to your audience:</p><ul><li>What are the most popular devices they’ll use? iPad, iPhone</li> <li>What OS/Browser are most popular among your audience? Win 10, OS X</li> <li>What connection speeds do they have? 3G, 4G, broadband</li> <li>How tech savvy is your demographic? Woman between 18-35, fairly tech-savvy, smartphone owner, social media user.</li></ul><p>If you don’t have the luxury of surveying actual users, there is a wealth of useful statistical information available online. Here are some sites:</p><ul><li>W3 Schools: w3schools.com/browsers</li> <li>Net Market Share: <a href="http://www.netmarketshare.com" rel="nofollow noopener noreferrer external" target="_blank">http://www.netmarketshare.com</a></li> <li>StatCounter: <a href="http://gs.statcounter.com" rel="nofollow noopener noreferrer external" target="_blank">http://gs.statcounter.com</a></li></ul></section> <section><h2 id="prioritize-browser-and-device-support"><a href="#prioritize-browser-and-device-support">Prioritize browser and device support</a></h2><p>Fully Supported Browsers and devices (all content must be readable, all functionality must work properly, minimal deviation from approved UI Design)</p><p>Partially supported browsers and devices: all content must be readable, navigation must work, login functionality must degrade gracefully</p><p>Unsupported browsers and devices: no testing will be performed</p></section> <section><h2 id="decide-what-to-test"><a href="#decide-what-to-test">Decide what to test</a></h2><p>There are 6 core types of testing you should perform:</p><ul><li><strong>Functionality</strong> testing</li> <li><strong>Usability</strong> testing</li> <li><strong>Errors and Exception</strong> testing</li> <li><strong>Compatibility</strong> testing</li> <li><strong>Performance</strong> testing</li> <li><strong>Security</strong> testing</li></ul><section><h3 id="functionality-testing"><a href="#functionality-testing">Functionality testing</a></h3><p>a. Test all links:</p><ul><li>test all internal and outgoing links, links that jump within single pages, links used to send email, check for orphan pages (pages that can’t be accessed cuz nothing links to it)</li></ul><p>b. Test forms on all pages:</p><ul><li>Check validations on each field</li> <li>Check default values of fields, if they exist</li> <li>Test incorrect input into form fields</li> <li>Test options to create, delete, view or modify forms.</li></ul><p>c. Test cookies:</p><ul><li>Test functionality and security by enabling/disabling cookies in your browser.</li> <li>Test to ensure cookies are encrypted before writing to the user’s device.</li> <li>For session-based cookies, check login sessions and user stats.</li></ul><p>d. Test HTML/CSS validation:</p><ul><li>Validate the site for HTML syntax errors: <a href="http://validator.w3.org" rel="nofollow noopener noreferrer external" target="_blank">http://validator.w3.org</a></li> <li>Check that the site is crawlable to search engines: <a href="https://www.google.com/webmasters/tools" rel="nofollow noopener noreferrer external" target="_blank">https://www.google.com/webmasters/tools</a></li></ul><p>e. Test database connections and consistency</p><ul><li>Check data integrity and errors while you edit, delete, modify the forms or do any DB related functionality.</li> <li>Ensure all database queries are executing correctly.</li> <li>Ensure data is retrieved correctly.</li> <li>Ensure data is updated correctly.</li></ul></section><section><h3 id="usability-testing"><a href="#usability-testing">Usability testing</a></h3><p>This covers navigation, content, presentation and task success. Testing can be done via several methods:</p><ul><li>SurveyMonkey (surveymonkey.com)</li> <li>Videotaped, moderated user sessions</li> <li>Online services such as: <ul><li>UserTesting</li> <li>Loop 11</li> <li>Optimizely</li></ul></li></ul><p>a. Test ease and effectiveness of navigation:</p><ul><li>Do users find what they need easily?</li> <li>How long does it take them to find what they’re looking for?</li> <li>Does the structure and organization of the navigation match the user’s expectation?</li> <li>Are links labeled with terms that make sense to users?</li></ul><p>b. Test usefulness of content:</p><ul><li>Does content match what your users want or need?</li> <li>Can users find & read the content they need?</li> <li>Do they understand the content?</li> <li>Can they act on the content?</li></ul><p>c. Test the effectiveness of UI:</p><ul><li>Do UI elements <strong>clearly separate</strong> navigation from content?</li> <li>Do UI elements distract or create a barrier between the user and the content? (ads or popup)</li> <li>Do UI elements clearly signal what can be acted upon or interacted with - and how to do so? (do buttons look like buttons?)</li> <li>Do UI elements work together to guide the user through a particular process or task flow?</li></ul><p>d. Test task success:</p><ul><li>Were users able to accomplish the key task they came to the site to perform?</li> <li>If so, did they feel satisfied - or angry and frustrated?</li> <li>If not, what prevented them from succeeding?</li> <li>What’s the consequence of each task failure - lost customers, increased support costs, inaccurate data captured?</li></ul></section><section><h3 id="errors-and-exceptions-testing"><a href="#errors-and-exceptions-testing">Errors and Exceptions testing</a></h3><p>This covers what happens when things go wrong - a user enters bas information, stops a process, the system crashes, etc.</p><ul><li>Test that interactions <strong>between servers</strong> are executed properly.</li> <li>Test that errors are handled properly.</li> <li>If the database or web server returns an error, make sure error messages are displayed appropriately to users.</li> <li>Make sure error messages are understandable and instructive.</li> <li>Test for transaction interruption or lost connection to a web server</li></ul></section><section><h3 id="compatibility-testing"><a href="#compatibility-testing">Compatibility testing</a></h3><p>There are 2 main categories: browser and OS.</p><p>a. Browser compatibility</p><ul><li>Does the website display consistently in different browsers?</li> <li>Does the website display consistently in the same browser across diffrent OS platforms?</li> <li>Does all functionality (links, forms, etc) work properly across diffrent browsers?</li> <li>Comprehensive list of online tools that simplify testing:</li></ul><p>b. OS and device compatibility</p><ul><li>Does all functionality (links, forms, etc) work properly across different OS platforms and devices?</li> <li>Do web service calls or API functions work properly across all OS platforms and devices?</li></ul></section><section><h3 id="performance-testing"><a href="#performance-testing">Performance Testing</a></h3><p>This measures how well the website can accommodate heavy user activity. It should include:</p><ul><li>Web Load Testing: what happens when a high volume of users are accessing or requesting the same page? the site should be able to handle simultaneous user requests, large input data from users, simultaneous database connections, etc.</li> <li>Web Stress Testing: what happens when the site is stretched beyond its specification limits? How does the site and the server reacts to stress and recovers from crashes? Stress is generally tested on input fields, login processes and sign up areas.</li></ul></section><section><h3 id="security-testing"><a href="#security-testing">Security Testing</a></h3><p>Security testing measures how well the website - and any user, product or transactional data it captures and transmits - is protected against hackers. Here are some ways to test security:</p><ul><li>Paste an internal url (https) directly into the browser’s address bar - without logging in. Internal pages should not open.</li> <li>Try changing url options directly while logged in with a specific user ID. Example: if you’re checking site statistics with publisher site ID=123. Try changing that ID parameter to a different site ID. Access should be denied.</li> <li>Try some invalid entried in input fields like login username, password, or input text boxes. Check the system reaction.</li> <li>Web directories or files should not be directly accessible - unless a specific download option exists in the UI.</li> <li>Test whether SSL is used for security measures. If used, you should see a warning when switching from non-secure (http) pages to secure (https) pages and vice versa.</li> <li>Check for logs of all transactions, error messages and security breach attempts on your web server (usually via CP)</li></ul></section></section>',1);function p(e){var t=n();o(6),s(e,t)}export{p as default,r as metadata};
