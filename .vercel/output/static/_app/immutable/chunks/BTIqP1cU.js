import{t as r,a as i}from"./DrjBu-Pq.js";import"./CeIxqNZp.js";import{s as t,f as u,a1 as e,a2 as o}from"./CnMiI8Eq.js";import{h as l}from"./fXp2Zi7U.js";const k={title:"JavaScript Advanced Concept Closure",date:"2024-05-10T00:00:00.000Z",categories:["javascript"]},{title:g,date:w,categories:y}=k;var h=r('<section><h2 id="quick-warning"><a href="#quick-warning">Quick warning</a></h2><p>This is hard</p></section> <section><h2 id="closures"><a href="#closures">Closures</a></h2><p>A closure is a function that has access to the parent scope, even after the parent function has closed. JS will automatically store the state of a closure in the heap memory, even after the parent function has returned. This behavior makes them useful for encapsulating private variables.</p><pre class="language-js"><!></pre></section>',1);function b(p){var a=h(),s=t(u(a),2),n=t(e(s),2),c=e(n);l(c,()=>`<code class="language-js"><span class="token keyword">function</span> <span class="token function">encapsulatedState</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">let</span> state <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    state <span class="token operator">+=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">return</span> state<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`),o(n),o(s),i(p,a)}export{b as default,k as metadata};
