import{t as u,a as k}from"./DrjBu-Pq.js";import"./CeIxqNZp.js";import{s as o,a1 as n,a2 as p}from"./CnMiI8Eq.js";import{h as e}from"./fXp2Zi7U.js";const i={title:"JavaScript Advanced Concept Spread Syntax",date:"2024-05-10T00:00:00.000Z",categories:["javascript"]},{title:g,date:v,categories:w}=i;var d=u('<section><h2 id="spread-syntax"><a href="#spread-syntax">Spread Syntax</a></h2><p>The <code>Spread</code> syntax <code>...</code> is a relatively new operator that was introduced in ES2018. It provides a concise way to combine objects and arrays.</p><pre class="language-js"><!></pre><p>Itâ€™s also useful for combining arrays.</p><pre class="language-js"><!></pre></section>');function j(c){var a=d(),s=o(n(a),2),r=n(s);e(r,()=>`<code class="language-js"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> 
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> 
    <span class="token literal-property property">baz</span><span class="token operator">:</span> <span class="token number">3</span> 
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token literal-property property">foo</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token operator">...</span>obj<span class="token punctuation">,</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123; foo: 1, bar: 2, baz: 3 &#125; the old foo is overwritten</span></code>`),p(s);var t=o(s,2),l=n(t);e(l,()=>`<code class="language-js"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr1<span class="token punctuation">,</span> <span class="token operator">...</span>arr2<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// arr3 will be [1,2,3,4,5,6]</span></code>`),p(t),p(a),k(c,a)}export{j as default,i as metadata};
