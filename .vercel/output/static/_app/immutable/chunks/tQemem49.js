import{t as o,a as i}from"./DrjBu-Pq.js";import"./CeIxqNZp.js";import{$ as n}from"./CnMiI8Eq.js";const s={title:"How to make a website responsive",date:"2023-11-4",categories:["frontend"]},{title:d,date:p,categories:w}=s;var r=o(`<section><h2 id="what-is-responsive"><a href="#what-is-responsive">What is responsive?</a></h2><p>Responsiveness means a site responds (adapts) when viewed on different devices, zoomed in or when a user changes settings like default text size.</p></section> <section><h2 id="why-320px-wide-and-above"><a href="#why-320px-wide-and-above">Why 320px wide and above?</a></h2><p>320px wide emulates iPhone 12 mini, iPhone 5, Xperia Compact etc and is an accessibility requirement for all sites under WCAG Success Criterion 1.4.10 (level AA).</p></section> <section><h2 id="how-to-best-approach-responsive-styling"><a href="#how-to-best-approach-responsive-styling">How to best approach responsive styling</a></h2><p>As a more general answer to your questions around when and how to add breakpoints:</p><ul><li>Do all html before anything. Make sure the right meaningful elements are chosen for the content</li> <li>Style the mobile design first. Shrink your viewport down, zoom and/or use device emulation view.</li> <li>For frontend mentor challenges ‚Äî where the mobile static design that‚Äôs provided is 375px wide ‚Äî get everything looking right at that width first.</li> <li>Then shrink the viewport width to 320px wide and check there‚Äôs still no horizontal (inline) overflow and everything works.</li></ul><p>üí° A top tip is to prefer max-width over width for your components! Also try to avoid fixed units when using flex or grid layouts, opting for % or fr units instead.
Only once you are happy with the mobile view should you start to enlarge the viewport. Depending on design, and what layout changes are needed, add a breakpoint (min-width media query) at the point where there is room for the layout to change. Make sure you note down the media query essentials below!</p></section> <section><h2 id="tips"><a href="#tips">Tips</a></h2><ul><li>Let mobile styles be your default (Data tables are probably the only exception to this!)</li> <li>Test your solutions on small screens, making sure everything works from 320px wide and larger</li> <li>Stop saying that responsiveness is something you need to ‚Äúdo‚Äù as if it‚Äôs a step you build in at the end. As front end developers, we need to consider how our sites/components should adapt before we write a single line of code.</li> <li>Get into the habit of using zoom in browser AND changing your default text size</li> <li>Check your site on real devices whenever you can, rather than only relying on in-browser emulation</li></ul></section> <section><h2 id="reference"><a href="#reference">Reference</a></h2><p><a href="https://fedmentor.dev/posts/responsive-meaning/" rel="nofollow noopener noreferrer external" target="_blank">https://fedmentor.dev/posts/responsive-meaning/</a></p></section>`,1);function u(e){var t=r();n(8),i(e,t)}export{u as default,s as metadata};
